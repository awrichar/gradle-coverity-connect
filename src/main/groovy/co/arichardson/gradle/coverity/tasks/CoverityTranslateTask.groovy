package co.arichardson.gradle.coverity.tasks

import co.arichardson.gradle.coverity.Utils
import org.gradle.api.GradleException
import org.gradle.language.nativeplatform.tasks.AbstractNativeCompileTask
import org.gradle.process.internal.ExecAction

class CoverityTranslateTask extends AbstractCoverityIntermediatesTask {
    AbstractNativeCompileTask compileTask

    CoverityTranslateTask() {
        super()
        executable Utils.findCoverityTool('cov-translate', coverity.path)
    }

    @Override
    protected void preExec() {
        super.preExec()

        // Locate the compiler binary
        def compiler = Utils.findGccCompiler(compileTask.toolChain, compileTask)
        if (compiler == null) {
            throw new GradleException("Could not infer GCC compiler for: ${compileTask}")
        }

        // Locate the options file generated by the compile task
        def optionsFile = new File(compileTask.temporaryDir, 'options.txt')

        args compiler.path, "@${optionsFile}"
    }

    @Override
    protected void exec() {
        preExec()

        // Perform one exec per source file
        compileTask.source.files.each { File sourceFile ->
            ExecAction subAction = getExecActionFactory().newExecAction()
            subAction.commandLine = this.commandLine
            subAction.environment = this.environment
            subAction.workingDir = this.workingDir
            subAction.args sourceFile.path
            subAction.execute()
        }
    }
}
